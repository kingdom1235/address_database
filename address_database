#!/bin/bash

# The file names
#TODO Define all file names used for this project
# The file paths
#TODO Define all file paths here

#ANSI color codes
txtred='\e[1;31m'
txtgreen='\e[1;32m'
txtyellow='\e[1;33m'
txtblue='\e[1;34m'
txtreset='\e[0m'

# The globals
name=" "
email=" "
tel_no=" "
mob_no=" "
place=" "
message=" "
id=" "

# Flag
flag_add_entry_error=false
flag_choose_id_in_search=false

# Country code
COUNTRY_CODE="+84"

# Search and edit variables
save_or_all="7. All"
Search="${txtred}Search${txtreset}"
Edit="Edit"

# Time out periods
TIME_OUT=5

# Menu state
MENU_STATE="menu_header"
FIELD_MENU_STATE="field"
SEARCH_EDIT_STATE="search"
SEARCH_MENU_STATE="field"
EDIT_MENU_STATE="field"

# Set the path to the database 
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" 
DATABASE="$SCRIPT_DIR/mydatabase.db"

# Ensure the database file exists
if [ ! -f "$DATABASE" ]; then
	sqlite3 "$DATABASE" "CREATE TABLE IF NOT EXISTS address(
							id INTEGER PRIMARY KEY AUTOINCREMENT,
							name TEXT,
							email TEXT,
							tel_no TEXT,
							mob_no TEXT,
							place TEXT,
							message TEXT
	);"
fi

#-----------------------------LOG FILE-------------------------------#
function log()
{
	# TODO Write activities to log files along with timestamp, pass argument as a string
	true;
}

#-----------------------------MAIN MENU-------------------------------#
function menu_header()
{
	# TODO Just to print welcome menu presntation
	clear
	echo -e "$(
	cat <<- _EOF_
		My Database Project
		Please choose the below options:

		1. Add Entry
		2. Search / Edit Entry
		${txtred}x${txtreset}. Exit

		Note: Script Timeout is set
	_EOF_
	)"
	
	read -r -t $TIME_OUT -p "Please choose your option: "

	if [[ "$REPLY" == "" ]]; then
		echo -e "\t"
		exit 0
	fi

	if [[ "$REPLY" == "x" ]]; then
		exit 0
	fi
}

function choose_header_option()
{
	# TODO Just to choose the menu header option
	local option=$REPLY
	case $option in
		1)
			MENU_STATE="field_menu"
		;;

		2)
			MENU_STATE="search_edit_entry"
		;;

		x)
			MENU_STATE="menu_header"
		;;
	esac
}


#-----------------------------ADD (FIELD) MENU-------------------------------#
function field_menu()
{
	# TODO to print a selected user information 
	# Name, Email, Tel no, Mob num, Address, Message
	clear
	echo -e "$(
		cat <<- _EOF_
			My Database Project
			Please choose the below options:

			Add New Entry Screen:

			1. Name			: $name
			2. Email		: $email
			3. Tel No		: $tel_no
			4. Mob No		: $mob_no
			5. Place		: $place
			6. Message		: $message
			${txtred}x${txtreset}. Exit

		_EOF_
	)"

	if [[ $FIELD_MENU_STATE == "field" ]]; then
		read -r -p "Please choose the field to be added: "
	else 
		read -r -p "Please enter the $FIELD_MENU_STATE: "
	fi

	true;
}

function choose_field_menu_option()
{
	if [[ $FIELD_MENU_STATE == "field" ]]; then
		local option="$REPLY"
		case $option in
			1)
				FIELD_MENU_STATE="Name"
			;;

			2)
				FIELD_MENU_STATE="Email"
			;;

			3)
				FIELD_MENU_STATE="Telephone Number"
			;;

			4)
				FIELD_MENU_STATE="Mobile Number"
			;;

			5)
				FIELD_MENU_STATE="Place"
			;;

			6)
				FIELD_MENU_STATE="Message"
			;;

			x)
				FIELD_MENU_STATE="field"
				database_entry
				reset_global_value
				MENU_STATE="menu_header"
			;;
		esac
	fi
}

function add_entry()
{
	# TODO adding a new entry to database
	# 1. Validates the entries
	# 2. Add to database

	if [[ $FIELD_MENU_STATE != "field" ]]; then
		local option="$REPLY"
		case $FIELD_MENU_STATE in
			"Name")
				validate_entry "$option" "$FIELD_MENU_STATE"
				if [[ $flag_add_entry_error == "false" ]]; then
					FIELD_MENU_STATE="field"
				fi
				REPLY="" # Reset Reply
				true
			;;

			"Email")
				validate_entry "$option" "$FIELD_MENU_STATE"
				if [[ $flag_add_entry_error == "false" ]]; then
					FIELD_MENU_STATE="field"
				fi
				REPLY="" # Reset Reply
				true
			;;

			"Telephone Number")
				validate_entry "$option" "$FIELD_MENU_STATE"
				if [[ $flag_add_entry_error == "false" ]]; then
					FIELD_MENU_STATE="field"
				fi
				REPLY="" # Reset Reply
				true
			;;

			"Mobile Number")
				validate_entry "$option" "$FIELD_MENU_STATE"
				if [[ $flag_add_entry_error == "false" ]]; then
					FIELD_MENU_STATE="field"
				fi
				REPLY="" # Reset Reply
				true
			;;

			"Place")
				validate_entry "$option" "$FIELD_MENU_STATE"
				if [[ $flag_add_entry_error == "false" ]]; then
					FIELD_MENU_STATE="field"
				fi
				REPLY="" # Reset Reply
				true
			;;

			"Message")
				message="$option"
				FIELD_MENU_STATE="field"
				REPLY="" # Reset Reply
				true
			;;
		esac
	fi
}

function validate_entry()
{
	# TODO Inputs entered by user must be verified and validated as per fields
	# 1. Names should have only alphabets
	# 2. Emails must have a @ symbols and ending with .<domain> Eg: user@mail.com
	# 3. Mobile/Tel numbers must have 10 digits .
	# 4. Place must have only alphabets
	local option="$1"
	local state="$2"
	# echo "Validate entry with $option and $state"
	# sleep 4
	case $state in
		"Name")
			if [[ ! "$option" =~ ^[a-zA-Z]+$ ]]; then
				echo -e "${txtred}Invalid name. Only alphabets are allowed.${txtreset}"
				flag_add_entry_error=true
				sleep 2
			else
				name=$option
				flag_add_entry_error=false
			fi
		;;

		"Email")
			if [[ ! "$option" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
				echo -e "${txtred}Invalid email. Must be in the format user@mail.com.${txtreset}"
				flag_add_entry_error=true
				sleep 2
			else
				email=$option
				flag_add_entry_error=false
			fi
		;;

		"Telephone Number")
			if [[ ! "$option" =~ ^[0-9]{10}$ ]]; then
				echo -e "${txtred}Invalid mobile number. Must be exactly 10 digits.${txtreset}"
				flag_add_entry_error=true
				sleep 2
			else
				tel_no="$COUNTRY_CODE-$option"
				flag_add_entry_error=false
			fi
		;;


		"Mobile Number")
			if [[ ! "$option" =~ ^[0-9]{10}$ ]]; then
				echo -e "${txtred}Invalid mobile number. Must be exactly 10 digits.${txtreset}"
				flag_add_entry_error=true
				sleep 2
			else
				mob_no="$COUNTRY_CODE-$option"
				flag_add_entry_error=false
			fi
		;;

		"Place")
			if [[ ! "$option" =~ ^[a-zA-Z]+$ ]]; then
				echo -e "${txtred}Invalid place. Only alphabets are allowed.${txtreset}"
				flag_add_entry_error=true
				sleep 2
			else
				place=$option
				flag_add_entry_error=false
			fi
		;;
	esac
	# echo "flag_add_entry_error is $flag_add_entry_error"
	# sleep 3
	true;
}

function database_entry()
{
	# TODO user inputs will be written to database file
	# 1. If some fields are missing add consicutive ','. Eg: user,,,,,
	sqlite3 "$DATABASE" "INSERT INTO address (name, email, tel_no, mob_no, place, message) VALUES ('$name', '$email', '$tel_no', '$mob_no', '$place', '$message');"		
	# TODO symbol ' ' is important
	true;
}

function reset_global_value()
{
	name=" "
	email=" "
	tel_no=" "
	mob_no=" "
	place=" "
	message=" "
	id=" "
	true;
}


#-----------------------------SEARCH MENU-------------------------------#
function search_and_edit()
{
	# TODO UI for editing and searching 
	clear
	echo -e "$(
		cat <<- _EOF_
			My Database Project
			Please choose the below options:

			$Search / $Edit by:

			1. Name			: $name
			2. Email		: $email
			3. Tel No		: $tel_no
			4. Mob No		: $mob_no
			5. Place		: $place
			6. Message		: $message
			$save_or_all 
			${txtred}x${txtreset}. Exit

		_EOF_
	)"

	if [[ $SEARCH_EDIT_STATE == "search" ]]; then
		if [[ $SEARCH_MENU_STATE == "field" ]]; then
			read -r -p "Please choose the field to be searched: "
		else
			if [[ $SEARCH_MENU_STATE == "All" ]]; then
				true
			else
				read -r -p "Please enter the $SEARCH_MENU_STATE: " 
			fi
		fi
	fi

	if [[ $SEARCH_EDIT_STATE == "edit" ]]; then
		if [[ $EDIT_MENU_STATE == "field" ]]; then
			read -r -p "Please choose your option: "
		else
			read -r -p "Please enter the new $SEARCH_MENU_STATE: "
		fi
		fi
	true;
}

function change_between_search_edit()
{
	# TODO Show changes between search and edit menu
	if [[ $SEARCH_EDIT_STATE == "edit" ]]; then
		save_or_all="${txtred}7. Save${txtreset}"
		Search="Search"
		Edit="${txtred}Edit${txtreset}"
	else
		save_or_all="7. All"
		Search="${txtred}Search${txtreset}"
		Edit="Edit"
	fi
}

function validate_id()
{
	local id_input="$1"
	local ids=("${@:2}")
	for id_i in "${ids[@]}"; do
		if [ "$id_input" -eq "$id_i" ]; then
			flag_choose_id_in_search=false
			break
		else
			flag_choose_id_in_search=true
		fi
	done
	if [[ $flag_choose_id_in_search == false ]]; then
        read -r -p "Do you want to delete it? (y/n)"
		SEARCH_EDIT_STATE="edit"
		SEARCH_MENU_STATE="field"
	else
		echo -e "${txtred}Wrong id.${txtreset}"
		sleep 3
	fi
}

function search_operation()
{
	# TODO Ask user for a value to search
	# 1. Value can be from any field of an entry.
	# 2. One by one iterate through each line of database file and search for the entry
	# 3. If available display all fields for that entry
	# 4. Prompt error incase not available
	# 5. Delete id if users want
	if [[ $SEARCH_EDIT_STATE == "search" ]]; then
		if [[ $SEARCH_MENU_STATE != "field" ]]; then
			local option="$REPLY"
			local result=""
			local id_database=""
			case $SEARCH_MENU_STATE in
				"Name")
					result=$(sqlite3 -header -column "$DATABASE" "SELECT * FROM address WHERE name='$option';")
					id_database=$(sqlite3 "$DATABASE" "SELECT id FROM address WHERE name='$option';")
					if [ -z "$result" ]; then
						echo -e "${txtyellow}Invalid. Found no Name${txtreset}"
						sleep 3
					else
						echo "$result"
						IFS=$'\n' read -r -d '' -a ids <<< "$id_database"
                        while true; do 
                            read -r -p "Select the user id to be displayed: "  
                            id="$REPLY"
                            validate_id "$id" "${ids[@]}"
                            if [[ "$flag_choose_id_in_search" == "false" ]]; then
                                break;
                            fi
                        done
					fi
					true	
				;;

				"Email")
					result=$(sqlite3 -header -column "$DATABASE" "SELECT * FROM address WHERE email='$option';")
					id_database=$(sqlite3 "$DATABASE" "SELECT id FROM address WHERE email='$option';")
					if [ -z "$result" ]; then
						echo -e "${txtyellow}Invalid. Found no Email${txtreset}"
						sleep 3
					else
						echo "$result"
						IFS=$'\n' read -r -d '' -a ids <<< "$id_database"
                        while true; do 
                            read -r -p "Select the user id to be displayed: "  
                            id="$REPLY"
                            validate_id "$id" "${ids[@]}"
                            if [[ "$flag_choose_id_in_search" == "false" ]]; then
                                break;
                            fi
                        done
					fi
					true	
				;;

				"Telephone Number")
					echo "option = $option"
					sleep 3
					result=$(sqlite3 -header -column "$DATABASE" "SELECT * FROM address WHERE tel_no='$option';")
					id_database=$(sqlite3 "$DATABASE" "SELECT id FROM address WHERE tel_no='$option';")
					if [ -z "$result" ]; then
						echo -e "${txtyellow}Invalid. Found no Telephone Number${txtreset}"
						sleep 3
					else
						echo "$result"
						IFS=$'\n' read -r -d '' -a ids <<< "$id_database"
                        while true; do 
                            read -r -p "Select the user id to be displayed: "  
                            id="$REPLY"
                            validate_id "$id" "${ids[@]}"
                            if [[ "$flag_choose_id_in_search" == "false" ]]; then
                                break;
                            fi
                        done
					fi
					true	
				;;

				"Mobile Number")
					result=$(sqlite3 -header -column "$DATABASE" "SELECT * FROM address WHERE mob_no='$option';")
					id_database=$(sqlite3 "$DATABASE" "SELECT id FROM address WHERE mob_no='$option';")
					if [ -z "$result" ]; then
						echo -e "${txtyellow}Invalid. Found no Mobile Number${txtreset}"
						sleep 3
					else
						echo "$result"
						IFS=$'\n' read -r -d '' -a ids <<< "$id_database"
                        while true; do 
                            read -r -p "Select the user id to be displayed: "  
                            id="$REPLY"
                            validate_id "$id" "${ids[@]}"
                            if [[ "$flag_choose_id_in_search" == "false" ]]; then
                                break;
                            fi
                        done
					fi
					true	
				;;

				"Place")
					result=$(sqlite3 -header -column "$DATABASE" "SELECT * FROM address WHERE place='$option';")
					id_database=$(sqlite3 "$DATABASE" "SELECT id FROM address WHERE place='$option';")
					if [ -z "$result" ]; then
						echo -e "${txtyellow}Invalid. Found no Place${txtreset}"
						sleep 3
					else
						echo "$result"
						IFS=$'\n' read -r -d '' -a ids <<< "$id_database"
                        while true; do 
                            read -r -p "Select the user id to be displayed: "  
                            id="$REPLY"
                            validate_id "$id" "${ids[@]}"
                            if [[ "$flag_choose_id_in_search" == "false" ]]; then
                                break;
                            fi
                        done
					fi
					true	
				;;

				"Message")
					result=$(sqlite3 -header -column "$DATABASE" "SELECT * FROM address WHERE message='$option';")
					id_database=$(sqlite3 "$DATABASE" "SELECT id FROM address WHERE message='$option';")
					if [ -z "$result" ]; then
						echo -e "${txtyellow}Invalid. Found no Message${txtreset}"
						sleep 3
					else
						echo "$result"
						IFS=$'\n' read -r -d '' -a ids <<< "$id_database"
                        while true; do 
                            read -r -p "Select the user id to be displayed: "  
                            id="$REPLY"
                            validate_id "$id" "${ids[@]}"
                            if [[ "$flag_choose_id_in_search" == "false" ]]; then
                                break;
                            fi
                        done
					fi
					true	
				;;

				"All")
					echo -e "${txtgreen}Show all data of address book${txtreset}"
					sqlite3 -header -column "$DATABASE" "SELECT * FROM address;"
					sleep 10
					SEARCH_MENU_STATE="field"
					REPLY=""
					true	
				;;
			esac
		fi
	fi
	true;
}

function choose_search_menu_option()
{
	if [[ $SEARCH_MENU_STATE == "field" ]]; then
		local option="$REPLY"
		case $option in
			1)
				SEARCH_MENU_STATE="Name"
			;;

			2)
				SEARCH_MENU_STATE="Email"
			;;

			3)
				SEARCH_MENU_STATE="Telephone Number"
			;;

			4)
				SEARCH_MENU_STATE="Mobile Number"
			;;

			5)
				SEARCH_MENU_STATE="Place"
			;;

			6)
				SEARCH_MENU_STATE="Message"
			;;

			7)
				SEARCH_MENU_STATE="All"
			;;

			x)
				SEARCH_MENU_STATE="field"
				MENU_STATE="menu_header"
			;;
		esac
	fi
}

#-----------------------------SEARCH MENU-------------------------------#
function edit_operation()
{
	# TODO Provide an option to change fields of an entry
	# 1. Ask user about the field to edit
	# 2. As per user selection, prompt a message to enter respected value
	# 3. Verify the user entry to field for matching. Eg mob number only 10 digits to enter
    # 4. Prompt error in case any mismatch of entered data and fields	
	true;
}

#-----------------------------SHOW UI-------------------------------#
function show_UI()
{
	case $MENU_STATE in
		"menu_header") 
			menu_header
			choose_header_option
		;;

		"field_menu")
			# The order below is important. Don't change
			field_menu
			add_entry
			choose_field_menu_option
		;;

		"search_edit_entry")
			# The order below is important. Don't change
			change_between_search_edit
			search_and_edit
			search_operation
			choose_search_menu_option	
		;;
	esac
	true;
}

#-----------------------------MAIN SCRIPT-------------------------------#
while [[ true ]]; do
	show_UI
done
